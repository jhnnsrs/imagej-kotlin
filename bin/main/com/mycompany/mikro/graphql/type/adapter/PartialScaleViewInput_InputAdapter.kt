//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.mycompany.mikro.graphql.type.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableDoubleAdapter
import com.apollographql.apollo.api.NullableIntAdapter
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.Optional
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.present
import com.mycompany.mikro.graphql.type.PartialScaleViewInput
import kotlin.IllegalStateException

public object PartialScaleViewInput_InputAdapter : Adapter<PartialScaleViewInput> {
  override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      PartialScaleViewInput = throw IllegalStateException("Input type used in output position")

  override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: PartialScaleViewInput,
  ) {
    if (value.collection is Optional.Present) {
      writer.name("collection")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.collection)
    }
    if (value.zMin is Optional.Present) {
      writer.name("zMin")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.zMin)
    }
    if (value.zMax is Optional.Present) {
      writer.name("zMax")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.zMax)
    }
    if (value.xMin is Optional.Present) {
      writer.name("xMin")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.xMin)
    }
    if (value.xMax is Optional.Present) {
      writer.name("xMax")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.xMax)
    }
    if (value.yMin is Optional.Present) {
      writer.name("yMin")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.yMin)
    }
    if (value.yMax is Optional.Present) {
      writer.name("yMax")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.yMax)
    }
    if (value.tMin is Optional.Present) {
      writer.name("tMin")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.tMin)
    }
    if (value.tMax is Optional.Present) {
      writer.name("tMax")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.tMax)
    }
    if (value.cMin is Optional.Present) {
      writer.name("cMin")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.cMin)
    }
    if (value.cMax is Optional.Present) {
      writer.name("cMax")
      NullableIntAdapter.present().toJson(writer, customScalarAdapters, value.cMax)
    }
    if (value.parent is Optional.Present) {
      writer.name("parent")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.parent)
    }
    if (value.scaleX is Optional.Present) {
      writer.name("scaleX")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.scaleX)
    }
    if (value.scaleY is Optional.Present) {
      writer.name("scaleY")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.scaleY)
    }
    if (value.scaleZ is Optional.Present) {
      writer.name("scaleZ")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.scaleZ)
    }
    if (value.scaleT is Optional.Present) {
      writer.name("scaleT")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.scaleT)
    }
    if (value.scaleC is Optional.Present) {
      writer.name("scaleC")
      NullableDoubleAdapter.present().toJson(writer, customScalarAdapters, value.scaleC)
    }
  }
}
