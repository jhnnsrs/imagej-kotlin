//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.mycompany.mikro.graphql.type.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.AnyAdapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.Optional
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.nullable
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.present
import com.mycompany.mikro.graphql.type.FromArrayLikeInput
import kotlin.IllegalStateException

public object FromArrayLikeInput_InputAdapter : Adapter<FromArrayLikeInput> {
  override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      FromArrayLikeInput = throw IllegalStateException("Input type used in output position")

  override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: FromArrayLikeInput,
  ) {
    writer.name("array")
    AnyAdapter.toJson(writer, customScalarAdapters, value.array)
    writer.name("name")
    StringAdapter.toJson(writer, customScalarAdapters, value.name)
    if (value.dataset is Optional.Present) {
      writer.name("dataset")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.dataset)
    }
    if (value.channelViews is Optional.Present) {
      writer.name("channelViews")
      PartialChannelViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.channelViews)
    }
    if (value.transformationViews is Optional.Present) {
      writer.name("transformationViews")
      PartialAffineTransformationViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.transformationViews)
    }
    if (value.acquisitionViews is Optional.Present) {
      writer.name("acquisitionViews")
      PartialAcquisitionViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.acquisitionViews)
    }
    if (value.pixelViews is Optional.Present) {
      writer.name("pixelViews")
      PartialPixelViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.pixelViews)
    }
    if (value.structureViews is Optional.Present) {
      writer.name("structureViews")
      PartialStructureViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.structureViews)
    }
    if (value.rgbViews is Optional.Present) {
      writer.name("rgbViews")
      PartialRGBViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.rgbViews)
    }
    if (value.timepointViews is Optional.Present) {
      writer.name("timepointViews")
      PartialTimepointViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.timepointViews)
    }
    if (value.opticsViews is Optional.Present) {
      writer.name("opticsViews")
      PartialOpticsViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.opticsViews)
    }
    if (value.scaleViews is Optional.Present) {
      writer.name("scaleViews")
      PartialScaleViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.scaleViews)
    }
    if (value.tags is Optional.Present) {
      writer.name("tags")
      StringAdapter.list().nullable().present().toJson(writer, customScalarAdapters, value.tags)
    }
    if (value.roiViews is Optional.Present) {
      writer.name("roiViews")
      PartialROIViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.roiViews)
    }
    if (value.fileViews is Optional.Present) {
      writer.name("fileViews")
      PartialFileViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.fileViews)
    }
    if (value.derivedViews is Optional.Present) {
      writer.name("derivedViews")
      PartialDerivedViewInput_InputAdapter.obj().list().nullable().present().toJson(writer,
          customScalarAdapters, value.derivedViews)
    }
  }
}
