//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.mycompany.mikro.graphql.type

import com.apollographql.apollo.api.Optional
import kotlin.Boolean
import kotlin.Double
import kotlin.Int
import kotlin.String
import kotlin.collections.List

public data class PartialRGBViewInput(
  /**
   * The collection this view belongs to
   */
  public val collection: Optional<String?> = Optional.Absent,
  /**
   * The minimum z coordinate of the view
   */
  public val zMin: Optional<Int?> = Optional.Absent,
  /**
   * The maximum z coordinate of the view
   */
  public val zMax: Optional<Int?> = Optional.Absent,
  /**
   * The minimum x coordinate of the view
   */
  public val xMin: Optional<Int?> = Optional.Absent,
  /**
   * The maximum x coordinate of the view
   */
  public val xMax: Optional<Int?> = Optional.Absent,
  /**
   * The minimum y coordinate of the view
   */
  public val yMin: Optional<Int?> = Optional.Absent,
  /**
   * The maximum y coordinate of the view
   */
  public val yMax: Optional<Int?> = Optional.Absent,
  /**
   * The minimum t coordinate of the view
   */
  public val tMin: Optional<Int?> = Optional.Absent,
  /**
   * The maximum t coordinate of the view
   */
  public val tMax: Optional<Int?> = Optional.Absent,
  /**
   * The minimum c (channel) coordinate of the view
   */
  public val cMin: Optional<Int?> = Optional.Absent,
  /**
   * The maximum c (channel) coordinate of the view
   */
  public val cMax: Optional<Int?> = Optional.Absent,
  public val context: Optional<String?> = Optional.Absent,
  public val gamma: Optional<Double?> = Optional.Absent,
  public val contrastLimitMin: Optional<Double?> = Optional.Absent,
  public val contrastLimitMax: Optional<Double?> = Optional.Absent,
  public val rescale: Optional<Boolean?> = Optional.Absent,
  public val scale: Optional<Double?> = Optional.Absent,
  public val active: Optional<Boolean?> = Optional.Absent,
  public val colorMap: Optional<ColorMap?> = Optional.Absent,
  public val baseColor: Optional<List<Double>?> = Optional.Absent,
)
