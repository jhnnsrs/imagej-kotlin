//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.mycompany.rekuest.graphql.type.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.BooleanAdapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.NullableStringAdapter
import com.apollographql.apollo.api.Optional
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.list
import com.apollographql.apollo.api.obj
import com.apollographql.apollo.api.present
import com.mycompany.rekuest.graphql.type.DefinitionInput
import kotlin.IllegalStateException

public object DefinitionInput_InputAdapter : Adapter<DefinitionInput> {
  override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
      DefinitionInput = throw IllegalStateException("Input type used in output position")

  override fun toJson(
    writer: JsonWriter,
    customScalarAdapters: CustomScalarAdapters,
    `value`: DefinitionInput,
  ) {
    if (value.description is Optional.Present) {
      writer.name("description")
      NullableStringAdapter.present().toJson(writer, customScalarAdapters, value.description)
    }
    if (value.collections is Optional.Present) {
      writer.name("collections")
      StringAdapter.list().present().toJson(writer, customScalarAdapters, value.collections)
    }
    writer.name("name")
    StringAdapter.toJson(writer, customScalarAdapters, value.name)
    if (value.stateful is Optional.Present) {
      writer.name("stateful")
      BooleanAdapter.present().toJson(writer, customScalarAdapters, value.stateful)
    }
    if (value.portGroups is Optional.Present) {
      writer.name("portGroups")
      PortGroupInput_InputAdapter.obj().list().present().toJson(writer, customScalarAdapters,
          value.portGroups)
    }
    if (value.args is Optional.Present) {
      writer.name("args")
      PortInput_InputAdapter.obj().list().present().toJson(writer, customScalarAdapters, value.args)
    }
    if (value.returns is Optional.Present) {
      writer.name("returns")
      PortInput_InputAdapter.obj().list().present().toJson(writer, customScalarAdapters,
          value.returns)
    }
    writer.name("kind")
    NodeKind_ResponseAdapter.toJson(writer, customScalarAdapters, value.kind)
    if (value.isTestFor is Optional.Present) {
      writer.name("isTestFor")
      StringAdapter.list().present().toJson(writer, customScalarAdapters, value.isTestFor)
    }
    if (value.interfaces is Optional.Present) {
      writer.name("interfaces")
      StringAdapter.list().present().toJson(writer, customScalarAdapters, value.interfaces)
    }
    if (value.isDev is Optional.Present) {
      writer.name("isDev")
      BooleanAdapter.present().toJson(writer, customScalarAdapters, value.isDev)
    }
  }
}
