//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '4.0.0'.
//
package com.mycompany.rekuest.graphql.adapter

import com.apollographql.apollo.api.Adapter
import com.apollographql.apollo.api.CustomScalarAdapters
import com.apollographql.apollo.api.StringAdapter
import com.apollographql.apollo.api.json.JsonReader
import com.apollographql.apollo.api.json.JsonWriter
import com.apollographql.apollo.api.missingField
import com.apollographql.apollo.api.obj
import com.mycompany.rekuest.graphql.GetProvisionQuery
import kotlin.String
import kotlin.collections.List

public object GetProvisionQuery_ResponseAdapter {
  public object Data : Adapter<GetProvisionQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("provision")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetProvisionQuery.Data {
      var _provision: GetProvisionQuery.Provision? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _provision = Provision.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetProvisionQuery.Data(
        provision = _provision ?: missingField(reader, "provision")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetProvisionQuery.Data,
    ) {
      writer.name("provision")
      Provision.obj().toJson(writer, customScalarAdapters, value.provision)
    }
  }

  public object Provision : Adapter<GetProvisionQuery.Provision> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "template")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetProvisionQuery.Provision {
      var _id: String? = null
      var _template: GetProvisionQuery.Template? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _template = Template.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetProvisionQuery.Provision(
        id = _id ?: missingField(reader, "id"),
        template = _template ?: missingField(reader, "template")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetProvisionQuery.Provision,
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("template")
      Template.obj().toJson(writer, customScalarAdapters, value.template)
    }
  }

  public object Template : Adapter<GetProvisionQuery.Template> {
    public val RESPONSE_NAMES: List<String> = listOf("id", "interface", "extension")

    override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        GetProvisionQuery.Template {
      var _id: String? = null
      var _interface: String? = null
      var _extension: String? = null

      while (true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _id = StringAdapter.fromJson(reader, customScalarAdapters)
          1 -> _interface = StringAdapter.fromJson(reader, customScalarAdapters)
          2 -> _extension = StringAdapter.fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return GetProvisionQuery.Template(
        id = _id ?: missingField(reader, "id"),
        `interface` = _interface ?: missingField(reader, "interface"),
        extension = _extension ?: missingField(reader, "extension")
      )
    }

    override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: GetProvisionQuery.Template,
    ) {
      writer.name("id")
      StringAdapter.toJson(writer, customScalarAdapters, value.id)

      writer.name("interface")
      StringAdapter.toJson(writer, customScalarAdapters, value.`interface`)

      writer.name("extension")
      StringAdapter.toJson(writer, customScalarAdapters, value.extension)
    }
  }
}
